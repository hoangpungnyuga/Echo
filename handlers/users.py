from loader import bot, dp, chat_log, support
import asyncio
import ping3
import logging
import psutil
import time
import pytz
import traceback
from peewee import DoesNotExist
from aiogram import types
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from data.functions.models import *
from aiogram.types.message_id import MessageId
from delayer import delayed_message
from screl import UQ
from datetime import datetime, timedelta
logging.basicConfig(level=logging.DEBUG)

def get_mention(user):
	return f"t.me/{user.username}" if user.username else f"t.me/None"

@dp.message_handler(commands=["rules"])
@delayed_message(rate_limit=2, rate_limit_interval=5)
async def rules(message: Message):
	keyboard = InlineKeyboardMarkup().add(InlineKeyboardButton(text=f"RULES", url="https://telegra.ph/Rules-Echo-to-Kim-04-30")) # type: ignore
	await message.reply(f"–ü—Ä–∞–≤–∏–ª–∞ —ç—Ç–æ–≥–æ –±–æ—Ç–∞\n–¢–∞–∫ –∂–µ –ø–æ –ø–æ–≤–æ–¥—É –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–∏—Å–∞—Ç—å\n<b>>></b> {support}", reply_markup=keyboard)

@dp.message_handler(commands=["users"])
@delayed_message(rate_limit=2, rate_limit_interval=5)
async def stats(message: Message):
	users = Users.select()
	await message.reply(f"üëæ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å–µ–π—á–∞—Å <code>{len(users)}</code> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ")

@dp.message_handler(commands=["nick"])
@delayed_message(rate_limit=2, rate_limit_interval=5)
async def nick(message: Message):
	await message.reply(f'Oops.. –≠—Ç–æ –Ω–µ —é–∑–∞–±–µ–ª—å–Ω–æ!üòæ –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–π /tag')

@dp.message_handler(commands=["ban"])
@delayed_message(rate_limit=2, rate_limit_interval=5)
async def ban(message: Message):
	if Admins.get_or_none(id=message.chat.id):
		await message.reply("–¢–µ–ø–µ—Ä—å —ç—Ç–æ /mute")
	else:
		return
@dp.message_handler(commands=["unban"])
@delayed_message(rate_limit=2, rate_limit_interval=5)
async def unban(message: Message):
	if Admins.get_or_none(id=message.chat.id):
		await message.reply('–¢–µ–ø–µ—Ä—å —ç—Ç–æ /unmute')
	else:
		return

@dp.message_handler(commands=["help"])
@delayed_message(rate_limit=2, rate_limit_interval=5)
async def help(message: Message):
	await message.reply(
			'<b>–Ø –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º —é–∑–µ—Ä–∞–º.</b>\n\n'
			'<b>‚åñ –í—Å–µ —á—Ç–æ –≤–∞—Å –º–æ–∂–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å</b>\n'
			'<b>></b> /start , /rules\n\n'
			'<b>‚åñ –ö–æ–≥–¥–∞ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞?</b>\n'
			'<b>><u> –ó–∞–≤—Ç—Ä–∞, –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –ø—Ä–æ—á—Ç–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑!</u></b>', parse_mode="HTML")

@dp.message_handler(commands=["profile"])
@delayed_message(rate_limit=2, rate_limit_interval=5)
async def profile(message: Message):
	user = Users.get_or_none(Users.id == message.chat.id)
	users = Users.select()
	last_msg = message.message_id
	username = f'@{message.from_user.username}' if message.from_user.username else "undefined"
	delay = Users.get(Users.id==message.chat.id).mute - datetime.now()
	dur = str(delay).split(".")[0]
	if dur.startswith("-"):
		dur = "undefined"
	if Admins.get_or_none(id=message.chat.id):
		is_admin = True
	else:
		is_admin = False
	msgs_db = rdb.get("messages", [])
	await message.reply("Debug your profile info:\n"
				f"Name: {message.from_user.full_name}\n"
				f"ID: <code>{message.from_user.id}</code>\n"
				f"Username: {username}\n"
				f"Mute: {dur}\n"
				f"Warns: {user.warns}\n"
				f"Admin_status: {is_admin}\n"
				f"Use_tag: {user.tag}\n"
				f"Users: {len(users)}\n"
				f"lastmsg chat: {last_msg}, msg_sent: {len(msgs_db)}")

@dp.message_handler(commands=['warns'])
@delayed_message(rate_limit=2, rate_limit_interval=5)
async def warns(message: types.Message):
	user = Users.get_or_none(Users.id == message.chat.id)
	await message.reply(f'Warns: {user.warns}.\n3 –≤–∞—Ä–Ω–∞ - –º—É—Ç –Ω–∞ 7 —á–∞—Å–æ–≤.')

@dp.message_handler(commands=['ping'])
@delayed_message(rate_limit=2, rate_limit_interval=10)
async def ping_telegram(message: types.Message):
	pings = await message.reply("ü§≥PONG!")
	try:
		dc1 = ping3.ping('149.154.175.53')
		dc2 = ping3.ping('149.154.167.51')
		dc3 = ping3.ping('149.154.175.100')
		dc4 = ping3.ping('149.154.167.91')
		dc5 = ping3.ping('91.108.56.130')
		await pings.edit_text(f'üèì–ü–∏–Ω–≥ —Ç–µ–ª–µ–≥—Ä–∞–º –¥–∞—Ç–∞ —Ü–µ–Ω—Ç—Ä–æ–≤:\n\n\n'
							f'üá∫üá∏DC1 MIA, Miami FL, USA:<code>{dc1}</code>.ms\n\n'
							f'üá≥üá±DC2 AMS, Amsterdam, NL:<code>{dc2}</code>.ms\n\n'
							f'üá∫üá∏DC3* MIA, Miami FL, USA:<code>{dc3}</code>.ms\n\n'
							f'üá≥üá±DC4 AMS, Amsterdam, NL:<code>{dc4}</code>.ms\n\n'
							f'üá∏üá¨DC5 SIN, Singapore, SG:<code>{dc5}</code>.ms', parse_mode="HTML")
	except PermissionError as e:
		if isinstance(e, PermissionError) and str(e) == "[Errno 13] Permission denied":
			await pings.edit_text(f"–û—à–∏–±–∫–∞:(\n–≠—Ç–æ - Permission denied\n–ü–æ–ø—Ä–æ–±—É–π /fix\n–ï—Å–ª–∏ –∂–µ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ, –ø–∏—à–∏—Ç–µ {support}")
		else:
			error_message = traceback.format_exc()  # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
			await pings.edit_text(f"–û—à–∏–±–∫–∞:(\n{error_message}\n–ü–æ–ø—Ä–æ–±—É–π /fix\n–ï—Å–ª–∏ –∂–µ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ, –ø–∏—à–∏—Ç–µ {support}")

@dp.message_handler(commands=["life"])
@delayed_message(rate_limit=2, rate_limit_interval=5)
async def get_system_stats(message: types.Message):
	hey = await message.reply("I'm counting..")
	await asyncio.sleep(1)
	try:
		user = Users.get_or_none(Users.id == message.chat.id)
		if user:
			start_time = time.monotonic()
			cpu_percent = psutil.cpu_percent()
			mem_info = psutil.virtual_memory()
			mem_percent = mem_info.percent
			mem_free_percent = mem_info.available * 100 / mem_info.total
			swap_info = psutil.swap_memory()
			swap_percent = swap_info.percent
			swap_free_percent = swap_info.free * 100 / swap_info.total
			disk_usage = psutil.disk_usage('/')
			disk_percent = disk_usage.percent
			disk_free_percent = 100 - disk_percent
			tz = pytz.timezone('Europe/Moscow') # –ú–µ–Ω—è—Ç—å –Ω–∞ —Å–≤–æ—ë —É—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.
			now_eest = datetime.now(tz)
			format_date = now_eest.strftime("%Y-%m-%d %H:%M:%S")
			end_time = time.monotonic()
			vol_duration = end_time - start_time
			if vol_duration < 1:
					vol_duration_str = f"{int(vol_duration * 1000)} ms"
			elif vol_duration < 60:
				vol_duration_str = f"{int(vol_duration)} s"
			else:
				vol_duration_min = int(vol_duration // 60)
				vol_duration_sec = int(vol_duration % 60)
				vol_duration_str = f"{vol_duration_min} m {vol_duration_sec} s"

			google = ping3.ping('8.8.8.8', unit="ms", timeout=1) or "failed:(" # DNS Google.
			"""–ï—Å–ª–∏ –∂–µ —ç—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–≤–µ—Ä—å - 'ping 8.8.8.8'
			–ï—Å–ª–∏ –æ—Ç–≤–µ—Ç - 'ping: socket: Operation not permitted'
			–ü–æ–ø—Ä–æ–±—É–π ' sudo sysctl -w net.ipv4.ping_group_range='0 2147483647' '"""

			response = f"Status machine lifeüïä\nCommand completed in {vol_duration_str}.\n\n"

			response += f"Time ping <code>8.8.8.8</code> completed in <code>{google:.3f}</code>.ms\n"
			if cpu_percent > 97:
				response += f"‚ÄºÔ∏èCPU: {cpu_percent}%‚ÄºÔ∏è\n"
			else:
				response += f">CPU: {cpu_percent}%\n"

			if mem_percent > 96:
				response += f"‚ÄºÔ∏èRAM: {mem_percent:.1f}% / Free: {mem_free_percent:.1f}%‚ÄºÔ∏è\n"
			else:
				response += f">RAM: {mem_percent:.1f}% / Free: {mem_free_percent:.1f}%\n"

			if not swap_percent == 0:
				response += f">Swap: {swap_percent:.1f}% / Free: {swap_free_percent:.1f}%\n"
			else:
				pass

			if disk_percent > 98:
				response += f"‚ÄºÔ∏èDisk Usage: {disk_percent:.1f}% / Free: {disk_free_percent:.1f}%‚ÄºÔ∏è\n"
			else:
				response += f">Disk Usage: {disk_percent:.1f}% / Free: {disk_free_percent:.1f}%\n"

			response += f"`Current date and time in RU Donetsk: {format_date}"
			DS = InlineKeyboardMarkup().add(InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data="del")) # type: ignore
			await hey.edit_text(response, reply_markup=DS)
	except PermissionError as e:
		if isinstance(e, PermissionError) and str(e) == "[Errno 13] Permission denied":
			await hey.edit_text(f"–û—à–∏–±–∫–∞:(\n–≠—Ç–æ - Permission denied\n–ü–æ–ø—Ä–æ–±—É–π /fix\n–ï—Å–ª–∏ –∂–µ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ, –ø–∏—à–∏—Ç–µ {support}")
		else:
			error_message = traceback.format_exc()
			await hey.edit_text(f"–û—à–∏–±–∫–∞:(\n{error_message}\n–ï—Å–ª–∏ –∂–µ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ, –ø–∏—à–∏—Ç–µ {support}")

@dp.message_handler(commands=["tag"])
@delayed_message(rate_limit=2, rate_limit_interval=3)
async def toggle_tagging(message: Message):
    try:
        user = Users.get(Users.id == message.chat.id)
        if user:
            if user.tag:
                Users.update(tag=False).where(Users.id == message.chat.id).execute()
                await message.reply("–í–∞—à–∏ —Å–ª–µ–¥—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è <b>–Ω–µ</b> –±—É–¥—É—Ç –ø–æ–º–µ—á–µ–Ω—ã –≤–∞—à–∏–º –Ω–∏–∫–æ–º")
            else:
                Users.update(tag=True).where(Users.id == message.chat.id).execute()
                await message.reply("–í–∞—à–∏ —Å–ª–µ–¥—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –ø–æ–º–µ—á–µ–Ω—ã –≤–∞—à–∏–º –Ω–∏–∫–æ–º –∏ @username")
    except DoesNotExist:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ Users (DATABASE), —Ç–æ –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ.
        Users.create(id=message.chat.id, tag=True)
        await message.reply("–í–∞—à–∏ —Å–ª–µ–¥—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –ø–æ–º–µ—á–µ–Ω—ã –≤–∞—à–∏–º –Ω–∏–∫–æ–º –∏ @username\n<tg-spoiler>–í—ã –±—ã–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ.</tg-spoiler>", parse_mode="HTML")

@dp.message_handler(commands=["start"])
@delayed_message(rate_limit=2, rate_limit_interval=5)
async def start(message: Message):
	if not Users.select().where(Users.id==message.chat.id).exists():
		Users.create(id=message.chat.id)
	await message.reply('–°–∞–ª–∞–º, —ç—Ç–æ —ç—Ö–æ-–±–æ—Ç –æ—Ç —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π ILNAZ GOD –∏ –ö–∏–ºüíñüíñ.\n\n'
			'–¢–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º Echo.\n\n'
			'–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏.\n\n'
			'(–≠—Ç–æ —Ç–æ—á–Ω–æ Echo-to-All?) –¢–æ—á–Ω–µ–µ –µ—Å–ª–∏ –±—ã—Ç—å -- <b>Echo to Kim</b>‚ù§Ô∏è)')

async def send(message, *args, **kwargs):
	return (await message.copy_to(*args, **kwargs)), args[0]

async def Send(message, keyboard, reply_data):
	result = [{"sender_id": message.chat.id}]
	msgs = await asyncio.gather(*[
		send(message, user.id, reply_markup=keyboard, reply_to_message_id=get_reply_id(reply_data, user.id) if message.reply_to_message else None)
		for user in Users.select(Users.id)
        if user.id != message.chat.id or user.id == message.chat.id and (user.id != 5885645595 or message.chat.id != 5885645595)
	], return_exceptions=True)

	for msg_obj in msgs:
		if isinstance(msg_obj, tuple):
			msg, user_id = msg_obj
			if isinstance(msg, MessageId):
				result.append({"chat_id": user_id, "msg_id": msg.message_id})
	else:
		result.append({"chat_id": message.chat.id, "msg_id": message.message_id})
	print(result)
	msgs_db = rdb.get("messages", [])
	msgs_db.append(result) # type: ignore
	rdb.set("messages", msgs_db)

@dp.message_handler(content_types="any")
async def any(message: Message):
	if message.content_type == "pinned_message":
		return
	if datetime.now() < Users.get(Users.id==message.chat.id).mute:
		delay = Users.get(Users.id == message.chat.id).mute - datetime.now()
		duration = delay.total_seconds()

		seconds = int(duration % 60)
		minutes = int((duration // 60) % 60)
		hours = int((duration // 3600) % 24)
		days = int((duration // 86400) % 30.4375)  # —Å—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–µ—Å—è—Ü–∞
		months = int((duration // 2629800) % 12)  # —Å—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≥–æ–¥–∞
		years = int(duration // 31557600)  # –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≥–æ–¥–∞

		duration_string = ""
		if years > 0:
			duration_string += f"{years} –≥–æ–¥{'' if years == 1 else '–æ–≤'} "
		if months > 0:
			duration_string += f"{months} –º–µ—Å—è—Ü{'' if months == 1 else '–µ–≤'} "
		if days > 0:
			duration_string += f"{days} –¥{'–µ–Ω—å ' if days == 1 else '–Ω–µ–π '}"
		if hours > 0:
			duration_string += f"{hours} —á–∞—Å{' ' if hours == 1 else '–æ–≤ '}"
		if minutes > 0:
			duration_string += f"{minutes} –º–∏–Ω—É—Ç{' ' if minutes == 1 else ' '}"
		if seconds > 0:
			duration_string += f"{seconds} —Å–µ–∫—É–Ω–¥{'–∞' if seconds == 1 else ''}"

		umute = InlineKeyboardMarkup().add(InlineKeyboardButton(text="#IT'S MUTE", url="https://www.youtube.com/watch?v=dQw4w9WgXcQ")) # type: ignore
		return await message.reply(f"–¢—ã —Å–º–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ {duration_string}", reply_markup=umute)

	if Users.get(Users.id==message.chat.id).tag:
		full_name = message.from_user.full_name
		username = message.from_user.username
		keyboard = InlineKeyboardMarkup().add(
		InlineKeyboardButton(f"{full_name}", url=f"t.me/{username}" if username else f"t.me/None") # type: ignore
		)
		if Admins.get_or_none(id=message.chat.id):
			keyboard.add(
			InlineKeyboardButton("ADMIN", url=f"t.me/{username}" if username else f"t.me/None") # type: ignore
			)
	else:
		keyboard = None

	Users.update(mute=datetime.now()).where(Users.id==message.chat.id).execute()
	if message.reply_to_message:
		reply_data = get_reply_data(message.chat.id, message.reply_to_message.message_id)
	else:
		reply_data = None

	if message.text or message.caption:
		if Users.get(Users.id==message.chat.id).last_msg == (message.text or message.caption):
			return await message.reply("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ.")
		Users.update(last_msg=message.text or message.caption).where(Users.id==message.chat.id).execute()

	if is_flood(message.chat.id):
		Users.update(mute=datetime.now() + timedelta(hours=1)).where(Users.id==message.chat.id).execute()
		minchgod = InlineKeyboardMarkup().add(InlineKeyboardButton(text=f"#FLOOD", url="https://www.youtube.com/watch?v=dQw4w9WgXcQ")) # type: ignore
		ims = await message.reply("–≠—Ç–æ —Ñ–ª—É–¥.\n–í—ã –±—ã–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã –æ—Ç —á–∞—Ç–∞ –Ω–∞ 1 —á–∞—Å", reply_markup=minchgod)
		await bot.pin_chat_message(ims.chat.id, ims.message_id)
		user_id = message.from_user.id
		try:
			await bot.send_message(chat_log, f"#FLOOD\n<b>ID:</b>{user_id}</b>")
		except: pass
		return

	users = Users.select()
	haha = await message.reply("Send...")
	start_time = time.monotonic()
	await Send(message, keyboard, reply_data)
	end_time = time.monotonic()
	send_duration = end_time - start_time

	if send_duration < 1:
		send_duration_str = f"{int(send_duration * 1000)} –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥"
	elif send_duration < 60:
		send_duration_str = f"{int(send_duration)} —Å–µ–∫—É–Ω–¥"
	else:
		send_duration_min = int(send_duration // 60)
		send_duration_sec = int(send_duration % 60)
		send_duration_str = f"{send_duration_min} –º–∏–Ω—É—Ç—É {send_duration_sec} —Å–µ–∫—É–Ω–¥"

	await haha.edit_text(f"–¢–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞ –∑–∞ <b>{send_duration_str}</b>", parse_mode="HTML")
